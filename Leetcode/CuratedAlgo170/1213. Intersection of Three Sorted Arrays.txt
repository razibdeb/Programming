/*
1213. Intersection of Three Sorted Arrays
Easy
https://leetcode.com/problems/intersection-of-three-sorted-arrays/
Facebook


Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.

 

Example 1:

Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]
Output: [1,5]
Explanation: Only 1 and 5 appeared in the three arrays.
Example 2:

Input: arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]
Output: []
 

Constraints:

1 <= arr1.length, arr2.length, arr3.length <= 1000
1 <= arr1[i], arr2[i], arr3[i] <= 2000




*/


/*
Runtime: 8 ms, faster than 93.21% of C++ online submissions for Intersection of Three Sorted Arrays.
Memory Usage: 11.8 MB, less than 55.97% of C++ online submissions for Intersection of Three Sorted Arrays.
*/

class Solution {
public:
    /*
    12:06
    
    as strictly increasing that means no duplicate??
    
    */
    vector<int> arraysIntersection(vector<int>& arr1, vector<int>& arr2, vector<int>& arr3) {
        
        int l1 = arr1.size();
        int l2 = arr2.size();
        int l3 = arr3.size();
        
        int i1 = 0, i2 = 0, i3 = 0;
        vector<int> result;
        while(i1 < l1 && i2 < l2 && i3 < l3) {
            if(arr1[i1] == arr2[i2] && arr1[i1] == arr3[i3]) {
                result.push_back(arr1[i1]);
                i1++;
                i2++;
                i3++;
            } else if(arr1[i1] <= arr2[i2]) {
                if(arr1[i1] <= arr3[i3]) {
                    i1++;
                } else {
                    i3++;
                }
            } else {
                //1 > 2
                if(arr2[i2] <= arr3[i3]) {
                    i2++;
                } else {
                    i3++;
                }
            }
        }
        
        return result;
    }
};